# -*- coding: utf-8 -*-
from html.parser import HTMLParser

from intelmq.lib import utils
from intelmq.lib.bot import ParserBot


class MyHTMLParser(HTMLParser):
    def __init__(self):
        self.table_firstrow = False
        self.collect_data = False
        self.collect_feeddata = False
        self.val_type = None
        self.raw = []
        self.rawtag = ''
        self.last_tag = ''
        self.feed_data = []
        self.count = 0
        super(MyHTMLParser, self).__init__()

    def handle_starttag(self, tag, attrs):
        self.last_tag = tag
        if tag.lower() == 'table':
            self.table_firstrow = True
        if tag.lower() == 'span':
            if self.table_firstrow:
                self.collect_data = True
        if tag.lower() == 'input':
            if self.collect_feeddata:
                for attr in attrs:
                    raw_tag = ' %s="%s"' % (attr[0], attr[1])
                    self.rawtag += raw_tag
                    if attr[0] == 'value':
                        attr_val = attr[1]
                        if self.val_type == 'DOMAIN':
                            self.feed_data.append([attr_val, ])
                        if self.val_type == 'IP':
                            val = attr_val
                            self.feed_data[self.count].append(val)
                            self.count += 1
            self.raw.append(["<%s%s" % (tag, self.rawtag)])
            self.rawtag = ''

    def handle_endtag(self, tag):
        if self.collect_feeddata:
            if self.val_type is None and tag == 'td':
                self.val_type = 'DOMAIN'
            elif self.val_type == 'IP'and tag == 'td':
                self.val_type = 'DOMAIN'
            elif self.val_type == 'DOMAIN' and tag == 'td':
                self.val_type = 'IP'
            self.collect_data = False

    def handle_data(self, data):
        if self.collect_data:
            if data == "IPs":
                self.collect_feeddata = True


parser = MyHTMLParser()


class MalwareurlParserBot(ParserBot):
    def process(self):
        report = self.receive_message()
        raw_report = utils.base64_decode(report["raw"])
        parser.feed(raw_report)
        raw = []
        for i in range(0, len(parser.raw), 2):
            raw.append("%s%s" % (parser.raw[i], parser.raw[i + 1]))
        for i, item in enumerate(parser.feed_data):
            event = self.new_event(report)
            event.add("source.fqdn", item[0], raise_failure=False)
            event.add("source.ip", item[1])
            event.add("classification.type", "malware")
            event.add("raw", raw[i])
            self.send_message(event)
        self.acknowledge_message()


BOT = MalwareurlParserBot
